// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "filteredRelationCount"]
}


datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  extensions = [ltree]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  threads       Thread[]
  votes Vote[]
  saved Saved[]
  communities Join_User_Community[]

  @@map("user")
}

model Thread {
  id         String   @id @default(cuid())
  title      String?
  content    String
  parent_id  String?
  created_at DateTime     @default(now())
  update_at  DateTime?
  node_path  Unsupported("ltree")? 
  updated    Boolean      @default(false)    
  deleted     Boolean      @default(false)
  deep       Int?  
  user User @relation(fields: [userId], references: [id])
  userId String
  saved Saved[]

  votes Vote[]

  community Community? @relation(fields: [communityId], references: [id])
  communityId String?
  @@map("thread")
}

enum VoteType {
  UP
  DOWN
}
model Vote {
  // id String @id @default(cuid()) 
  user User @relation(fields: [userId], references: [id])
  userId String
  thread Thread @relation(fields: [threadId], references: [id])
  threadId String
  type VoteType

  @@id([userId, threadId])
  @@map("votes")
}

model Saved {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  thread Thread @relation(fields: [threadId], references: [id]) 
  threadId String

  @@map("saved")

}

model Community {
  id String @id @default(cuid())
  name String @unique
  info String?
  created_at DateTime @default(now())
  avatar String?
  header_image String?

  //theme
  background_color String @default("#ffffff")
  background_image String? 
  interactive_elements_color String @default("#000000")

  threads Thread[]
  communities Join_User_Community[]
  
  @@map("community")
}

model Join_User_Community {
  id          String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@map("join_user_community")
}
